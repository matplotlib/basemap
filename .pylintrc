[MASTER]

# Analyse import fallback blocks. This can be used to support both
# Python 2 and 3 compatible code, which means that the block might have
# code that exists only in one or another interpreter, leading to false
# positives when analysed.
analyse-fallback-blocks=no

# Clear in-memory caches upon conclusion of linting. Useful if running
# pylint in a server-like mode.
clear-cache-post-run=yes

# A comma-separated list of package or module names from where
# C extensions may be loaded. Extensions are loading into the
# active Python interpreter and may run arbitrary code.
extension-pkg-whitelist=
    numpy,
    _geoslib

# Files or directories to be skipped (base names, not paths).
ignore=CVS

# Files or directories matching the regular expression patterns are
# skipped. The regex matches against base names, not paths. The
# default value ignores Emacs file locks.
ignore-patterns=^\.#

# List of module names for which member attributes should not be checked
# and will not be imported (useful for modules/projects where namespaces
# are manipulated during runtime and thus existing member attributes
# cannot be deduced by static analysis). It supports qualified module
# names, as well as Unix pattern matching.
ignored-modules=
    _geoslib

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
init-hook="import sys; sys.path.insert(0, 'src')"

# Use multiple processes to speed up Pylint. Specifying 0 will
# auto-detect the number of processors available to use, and will
# cap the count on Windows to avoid hangs.
jobs=1

# Control the amount of potential inferred values when inferring a
# single object. This can help the performance when dealing with
# large functions or complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python module names)
# to load, usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# When enabled, pylint would attempt to guess common misconfiguration
# and emit user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into
# the active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Regular expression matching correct argument names.
# Overrides argument-naming-style.
#argument-rgx=

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Regular expression matching correct attribute names.
# Overrides attr-naming-style.
#attr-rgx=

# Bad variable names which should always be refused.
bad-names=
    foo,
    bar,
    baz,
    toto,
    tutu,
    tata

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Regular expression matching correct class attribute names.
# Overrides class-attribute-naming-style.
#class-attribute-rgx=

# Naming style matching correct class names.
class-naming-style=PascalCase

# Regular expression matching correct class names.
# Overrides class-naming-style.
#class-rgx=

# Naming style matching correct constant names.
const-naming-style=any

# Regular expression matching correct constant names.
# Overrides const-naming-style.
#const-rgx=

# Minimum line length for functions/classes that require docstrings,
# shorter ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names.
function-naming-style=snake_case

# Regular expression matching correct function names.
# Overrides function-naming-style.
#function-rgx=

# Good variable names which should always be accepted.
good-names=
    i, j, k, m, n,
    t, x, y, z, xy,
    nx, dx, x1, x2,
    ny, dy, y1, y2,
    fd, ax, h,
    _

# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

# Naming style matching correct inline iteration names.
inlinevar-naming-style=snake_case

# Regular expression matching correct inline iteration names.
# Overrides inlinevar-naming-style.
#inlinevar-rgx=

# Naming style matching correct method names.
method-naming-style=snake_case

# Regular expression matching correct method names.
# Overrides method-naming-style.
#method-rgx=

# Naming style matching correct module names.
#module-naming-style=snake_case

# Regular expression matching correct module names.
# Overrides module-naming-style.
module-rgx=^(test_)?((?P<snake>_{0,2}[a-z][a-z0-9_]{1,29}_{0,2})|(?P<Pascal>_?[A-Z][a-zA-Z0-9]{1,29}_{0,2}))$

# Colon-delimited sets of names that determine each other's naming style
# when the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names
# that do not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, e.g. abc.abstractproperty.
# Add to this list to register other decorators that produce valid
# properties. These decorators are taken in consideration only for
# invalid-name.
property-classes=
    abc.abstractproperty

# Naming style matching correct variable names.
variable-naming-style=snake_case

# Regular expression matching correct variable names.
# Overrides variable-naming-style.
#variable-rgx=


[CLASSES]

# Warn about protected attribute access inside special methods.
check-protected-access-in-special-methods=yes

# Method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=
    __init__,
    __new__,
    setUp,
    asyncSetUp,
    __post_init__

# Member names to be excluded from the protected access warning.
exclude-protected=
    _asdict,
    _fields,
    _replace,
    _source,
    _make,
    os._exit

# List of valid names for first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[DESIGN]

# Maximum number of arguments for function / method (R0913).
max-args=6

# Maximum number of attributes for a class (R0902).
max-attributes=12

# Maximum number of boolean expressions in an if statement (R0916).
max-bool-expr=6

# Maximum number of branch for function / method body (R0912).
max-branches=24

# Maximum number of locals for function / method body (R0914).
max-locals=24

# Maximum number of parents for a class (R0901).
max-parents=18

# Maximum number of positional arguments for function / method (R0917).
max-positional-arguments=6

# Maximum number of public methods for a class (R0904).
max-public-methods=90

# Maximum number of return / yield for function / method body.
max-returns=6

# Maximum number of statements in function / method body (R0915).
max-statements=90

# Minimum number of public methods for a class (R0903).
min-public-methods=1


[EXCEPTIONS]

# Exceptions that will emit a warning when caught.
overgeneral-exceptions=
    builtins.BaseException,
    builtins.Exception


[FORMAT]

# Expected format of line ending, e.g. empty (any), LF or CRLF.
expected-line-ending-format=LF

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent needed inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces)
# or "\t" (1 tab).
indent-string="    "

# Maximum number of characters on a single line.
max-line-length=99

# Maximum number of lines in a module.
max-module-lines=999

# Allow the body of a class to be on the same line as the declaration
# if body contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there
# is no else.
single-line-if-stmt=no


[IMPORTS]

# List of modules that can be imported at any level, not just the top
# level one.
allow-any-import-level=

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules=

# Output a graph (.gv or any supported image format) of external
# dependencies to the given file (report RP0402 must not be disabled).
ext-import-graph=

# Output a graph (.gv or any supported image format) of all
# (i.e. internal and external) dependencies to the given file
# (report RP0402 must not be disabled).
import-graph=

# Output a graph (.gv or any supported image format) of internal
# dependencies to the given file (report RP0402 must not be disabled).
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party
# library.
known-third-party=
    enchant

# Couples of modules and preferred modules, separated by a comma.
preferred-modules=


[LOGGING]

# The type of string formatting that logging methods do. `old` means
# using % formatting, `new` is for `{}` formatting.
logging-format-style=old

# Logging modules to check that the string format arguments are in
# logging function parameter format.
logging-modules=logging


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to
# show all. Valid levels: HIGH, CONTROL_FLOW (pylint >= 2.13.0),
# INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence=

# Disable the message, report, category or checker with the given id(s).
# You can either give multiple identifiers separated by comma (,) or
# put this option multiple times (only on the command line, not in the
# configuration file where it should appear only once). You can also
# use "--disable=all" to disable everything first and then re-enable
# specific checks. For example, if you want to run only the similarities
# checker, you can use "--disable=all --enable=similarities". If you
# want to run only the classes checker, but have no Warning level
# messages displayed, use "--disable=all --enable=classes --disable=W".
disable=
    # Allow freedom with imports.
    import-outside-toplevel,
    # Allow freedom with globals.
    global-statement,
    global-variable-not-assigned,
    global-variable-undefined,
    undefined-all-variable,
    # Allow freedom with inheritance.
    useless-object-inheritance,
    super-with-arguments,
    # Allow assigning to returned None.
    assignment-from-no-return,
    assignment-from-none,
    # Allow freedom with error raises.
    raise-missing-from,
    # Allow freedom with using lambda functions.
    unnecessary-lambda-assignment,
    # Allow freedom with multiline indentation.
    useless-option-value,
    bad-continuation,
    # Allow freedom with old ways of doing things.
    consider-using-f-string,
    use-dict-literal,
    use-yield-from,
    # Ignore warnings unknown by old PyLint versions.
    bad-option-value,
    unrecognized-option,
    unknown-option-value

# Enable the message, report, category or checker with the given id(s).
# You can either give multiple identifier separated by comma (,) or put
# this option multiple time (only on the command line, not in the
# configuration file where it should appear only once). See also the
# "--disable" option for examples.
enable=c-extension-no-member


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=
    FIXME,
    XXX,
    TODO


[REFACTORING]

# Maximum number of nested blocks for function / method body.
max-nested-blocks=6

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is
# called then it will be considered as an explicit return statement
# and no message will be printed.
never-returning-functions=
    sys.exit,
    argparse.parse_error


[REPORTS]

# Python expression which should return a score less than or equal to
# 10. You have access to the variables 'fatal', 'error', 'warning',
# 'refactor', 'convention', and 'info' which contain the number of
# messages in each category, as well as 'statement' which is the total
# number of statements analyzed. This score is used by the global
# evaluation report (RP0004).
evaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))

# Template used to display messages. This is a python new-style format
# string used to format the message information. See doc for all
# details.
msg-template=

# Set the output format. Available formats are: text, parseable,
# colorized, json2 (improved json format), json (old json format)
# and msvs (visual studio). You can also give a reporter class,
# e.g. mypackage.mymodule.MyReporterClass.
#output-format=

# Tells whether to display a full report or only the messages.
reports=no

# Activate the evaluation score.
score=yes


[SIMILARITIES]

# Comments are removed from the similarity computation.
ignore-comments=yes

# Docstrings are removed from the similarity computation.
ignore-docstrings=yes

# Imports are removed from the similarity computation.
ignore-imports=yes

# Signatures are removed from the similarity computation.
ignore-signatures=yes

# Minimum lines number of a similarity.
min-similarity-lines=30


[SPELLING]

# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# Spelling dictionary name. No available dictionaries: You need to
# install both the python package and the system dependency for
# enchant to work.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# Path to a file containing the private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to the private dictionary (see
# the --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words=no


[STRING]

# This flag controls whether inconsistent-quotes generates a warning
# when the character used as a quote delimiter is used inconsistently
# within a module.
check-quote-consistency=yes

# This flag controls whether the implicit-str-concat should generate a
# warning on implicit string concatenation in sequences defined over
# several lines.
check-str-concat-over-line-jumps=no


[TYPECHECK]

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register
# other decorators that produce valid context managers.
contextmanager-decorators=
    contextlib.contextmanager

# List of members which are set dynamically and missed by pylint
# inference system, and so shouldn't trigger E1101 when accessed.
# Python regular expressions are accepted.
generated-members=
    netCDF4,
    numpy,
    pyproj,
    mpl_toolkits.basemap.Basemap

# Tells whether to warn about missing members when the owner of the
# attribute is inferred to be None.
ignore-none=yes

# This flag controls whether pylint should warn about no-member and
# similar checks whenever an opaque object is returned when inferring.
# The inference can return multiple potential results while evaluating a
# Python object, but some branches might not be evaluated, which results
# in partial inference. In that case, it might be useful to still emit
# no-member and other checks for the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked
# (useful for classes with dynamically set attributes). This supports
# the use of qualified names.
ignored-classes=
    optparse.Values,
    thread._local,
    _thread._local,
    argparse.Namespace

# Show a hint with possible names when a member name was not found.
# The aspect of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be
# considered a similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in
# consideration when showing a hint for a missing member.
missing-member-max-choices=1

# List of decorators that change the signature of a decorated function.
signature-mutators=


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember
# that you should avoid defining new builtins when possible.
additional-builtins=

# Set whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of strings which can identify a callback function by name.
# A callback name must start or end with one of those strings.
callbacks=
    cb_,
    _cb

# A regular expression matching the name of dummy variables
# (i.e. expected to not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can
# redefine builtins.
redefining-builtins-modules=
    past.builtins,
    future.builtins,
    builtins,
    io
